import "dart:io";
import "dart:convert";


// This static list of commands is updated from time to time.  ./lib/commands.js can be updated with generate_commands.js
var commands_orig = ["get", "set", "setnx", "setex", "append", "strlen", "del", "exists", "setbit", "getbit", "setrange", "getrange", "substr",
    "incr", "decr", "mget", "rpush", "lpush", "rpushx", "lpushx", "linsert", "rpop", "lpop", "brpop", "brpoplpush", "blpop", "llen", "lindex",
    "lset", "lrange", "ltrim", "lrem", "rpoplpush", "sadd", "srem", "smove", "sismember", "scard", "spop", "srandmember", "sinter", "sinterstore",
    "sunion", "sunionstore", "sdiff", "sdiffstore", "smembers", "zadd", "zincrby", "zrem", "zremrangebyscore", "zremrangebyrank", "zunionstore",
    "zinterstore", "zrange", "zrangebyscore", "zrevrangebyscore", "zcount", "zrevrange", "zcard", "zscore", "zrank", "zrevrank", "hset", "hsetnx",
    "hget", "hmset", "hmget", "hincrby", "hdel", "hlen", "hkeys", "hvals", "hgetall", "hexists", "incrby", "decrby", "getset", "mset", "msetnx",
    "randomkey", "select", "move", "rename", "renamenx", "expire", "expireat", "keys", "dbsize", "auth", "ping", "echo", "save", "bgsave",
    "bgrewriteaof", "shutdown", "lastsave", "type", "multi", "exec", "discard", "sync", "flushdb", "flushall", "sort", "info", "monitor", "ttl",
    "persist", "slaveof", "debug", "config", "subscribe", "unsubscribe", "psubscribe", "punsubscribe", "publish", "watch", "unwatch", "cluster",
    "restore", "migrate", "dump", "object", "client", "eval", "evalsha"];

main(){
  var commandsText = new File("commands.js").readAsStringSync();
  int start = commandsText.indexOf("[");
  int end = commandsText.indexOf("]");
  commandsText = commandsText.substring(start-1,end+1);
  List commandsFile = JSON.decode(commandsText);
  Set<String>commands = new Set();
  Set<String>commands1 = new Set();
  commands1.addAll(commands_orig);
  commands1.addAll(commandsFile);
  commands1.forEach((item){
    commands.add(item.split(' ')[0]);
  });
  StringBuffer sbRedisClient = new StringBuffer();
  sbRedisClient.writeln("""// This file was generated by ./commands.js on ${new DateTime.now().toIso8601String()}
part of dart_redis;

typedef void RedisCallback(err,[ res]);

abstract class _RedisClient{
send_command (String command, [List args, RedisCallback callback]);
""");
  StringBuffer sbMulti = new StringBuffer();
  sbMulti.writeln("""// This file was generated by ./commands.js on ${new DateTime.now().toIso8601String()}
  part of dart_redis;
  abstract class _Multi{

Queue<MultiCommand> _queue = new Queue<MultiCommand>();
  """);
  
  commands.forEach((fullCommand) {
      var command = fullCommand.split(' ')[0];

      sbRedisClient.writeln(""" $command(List args, [RedisCallback callback]) {
          return this.send_command("$command", args, callback);
      }
      ${command.toUpperCase()}(List args, [RedisCallback callback])=>$command(args, callback);""");
      sbMulti.writeln("""
      Multi $command([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("$command",args,callback));
          return this;
      }
      Multi ${command.toUpperCase()}([List args,RedisCallback callback])=>$command(args,callback);
""");
  });
  
  sbRedisClient.writeln("""}""");
  sbMulti.writeln("""}""");
  new File("gen/RedisClient.dart").writeAsStringSync(sbRedisClient.toString());
  new File("gen/Multi.dart").writeAsStringSync(sbMulti.toString());
}