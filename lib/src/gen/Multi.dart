// This file was generated by ./commands.js on 2014-04-23T22:21:02.357
  part of dart_redis;
  abstract class _Multi{

Queue<MultiCommand> _queue = new Queue<MultiCommand>();
  
      Multi get([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("get",args,callback));
          return this;
      }
      Multi GET([List args,RedisCallback callback])=>get(args,callback);

      Multi set([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("set",args,callback));
          return this;
      }
      Multi SET([List args,RedisCallback callback])=>set(args,callback);

      Multi setnx([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("setnx",args,callback));
          return this;
      }
      Multi SETNX([List args,RedisCallback callback])=>setnx(args,callback);

      Multi setex([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("setex",args,callback));
          return this;
      }
      Multi SETEX([List args,RedisCallback callback])=>setex(args,callback);

      Multi append([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("append",args,callback));
          return this;
      }
      Multi APPEND([List args,RedisCallback callback])=>append(args,callback);

      Multi strlen([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("strlen",args,callback));
          return this;
      }
      Multi STRLEN([List args,RedisCallback callback])=>strlen(args,callback);

      Multi del([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("del",args,callback));
          return this;
      }
      Multi DEL([List args,RedisCallback callback])=>del(args,callback);

      Multi exists([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("exists",args,callback));
          return this;
      }
      Multi EXISTS([List args,RedisCallback callback])=>exists(args,callback);

      Multi setbit([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("setbit",args,callback));
          return this;
      }
      Multi SETBIT([List args,RedisCallback callback])=>setbit(args,callback);

      Multi getbit([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("getbit",args,callback));
          return this;
      }
      Multi GETBIT([List args,RedisCallback callback])=>getbit(args,callback);

      Multi setrange([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("setrange",args,callback));
          return this;
      }
      Multi SETRANGE([List args,RedisCallback callback])=>setrange(args,callback);

      Multi getrange([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("getrange",args,callback));
          return this;
      }
      Multi GETRANGE([List args,RedisCallback callback])=>getrange(args,callback);

      Multi substr([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("substr",args,callback));
          return this;
      }
      Multi SUBSTR([List args,RedisCallback callback])=>substr(args,callback);

      Multi incr([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("incr",args,callback));
          return this;
      }
      Multi INCR([List args,RedisCallback callback])=>incr(args,callback);

      Multi decr([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("decr",args,callback));
          return this;
      }
      Multi DECR([List args,RedisCallback callback])=>decr(args,callback);

      Multi mget([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("mget",args,callback));
          return this;
      }
      Multi MGET([List args,RedisCallback callback])=>mget(args,callback);

      Multi rpush([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("rpush",args,callback));
          return this;
      }
      Multi RPUSH([List args,RedisCallback callback])=>rpush(args,callback);

      Multi lpush([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("lpush",args,callback));
          return this;
      }
      Multi LPUSH([List args,RedisCallback callback])=>lpush(args,callback);

      Multi rpushx([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("rpushx",args,callback));
          return this;
      }
      Multi RPUSHX([List args,RedisCallback callback])=>rpushx(args,callback);

      Multi lpushx([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("lpushx",args,callback));
          return this;
      }
      Multi LPUSHX([List args,RedisCallback callback])=>lpushx(args,callback);

      Multi linsert([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("linsert",args,callback));
          return this;
      }
      Multi LINSERT([List args,RedisCallback callback])=>linsert(args,callback);

      Multi rpop([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("rpop",args,callback));
          return this;
      }
      Multi RPOP([List args,RedisCallback callback])=>rpop(args,callback);

      Multi lpop([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("lpop",args,callback));
          return this;
      }
      Multi LPOP([List args,RedisCallback callback])=>lpop(args,callback);

      Multi brpop([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("brpop",args,callback));
          return this;
      }
      Multi BRPOP([List args,RedisCallback callback])=>brpop(args,callback);

      Multi brpoplpush([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("brpoplpush",args,callback));
          return this;
      }
      Multi BRPOPLPUSH([List args,RedisCallback callback])=>brpoplpush(args,callback);

      Multi blpop([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("blpop",args,callback));
          return this;
      }
      Multi BLPOP([List args,RedisCallback callback])=>blpop(args,callback);

      Multi llen([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("llen",args,callback));
          return this;
      }
      Multi LLEN([List args,RedisCallback callback])=>llen(args,callback);

      Multi lindex([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("lindex",args,callback));
          return this;
      }
      Multi LINDEX([List args,RedisCallback callback])=>lindex(args,callback);

      Multi lset([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("lset",args,callback));
          return this;
      }
      Multi LSET([List args,RedisCallback callback])=>lset(args,callback);

      Multi lrange([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("lrange",args,callback));
          return this;
      }
      Multi LRANGE([List args,RedisCallback callback])=>lrange(args,callback);

      Multi ltrim([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("ltrim",args,callback));
          return this;
      }
      Multi LTRIM([List args,RedisCallback callback])=>ltrim(args,callback);

      Multi lrem([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("lrem",args,callback));
          return this;
      }
      Multi LREM([List args,RedisCallback callback])=>lrem(args,callback);

      Multi rpoplpush([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("rpoplpush",args,callback));
          return this;
      }
      Multi RPOPLPUSH([List args,RedisCallback callback])=>rpoplpush(args,callback);

      Multi sadd([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sadd",args,callback));
          return this;
      }
      Multi SADD([List args,RedisCallback callback])=>sadd(args,callback);

      Multi srem([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("srem",args,callback));
          return this;
      }
      Multi SREM([List args,RedisCallback callback])=>srem(args,callback);

      Multi smove([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("smove",args,callback));
          return this;
      }
      Multi SMOVE([List args,RedisCallback callback])=>smove(args,callback);

      Multi sismember([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sismember",args,callback));
          return this;
      }
      Multi SISMEMBER([List args,RedisCallback callback])=>sismember(args,callback);

      Multi scard([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("scard",args,callback));
          return this;
      }
      Multi SCARD([List args,RedisCallback callback])=>scard(args,callback);

      Multi spop([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("spop",args,callback));
          return this;
      }
      Multi SPOP([List args,RedisCallback callback])=>spop(args,callback);

      Multi srandmember([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("srandmember",args,callback));
          return this;
      }
      Multi SRANDMEMBER([List args,RedisCallback callback])=>srandmember(args,callback);

      Multi sinter([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sinter",args,callback));
          return this;
      }
      Multi SINTER([List args,RedisCallback callback])=>sinter(args,callback);

      Multi sinterstore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sinterstore",args,callback));
          return this;
      }
      Multi SINTERSTORE([List args,RedisCallback callback])=>sinterstore(args,callback);

      Multi sunion([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sunion",args,callback));
          return this;
      }
      Multi SUNION([List args,RedisCallback callback])=>sunion(args,callback);

      Multi sunionstore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sunionstore",args,callback));
          return this;
      }
      Multi SUNIONSTORE([List args,RedisCallback callback])=>sunionstore(args,callback);

      Multi sdiff([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sdiff",args,callback));
          return this;
      }
      Multi SDIFF([List args,RedisCallback callback])=>sdiff(args,callback);

      Multi sdiffstore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sdiffstore",args,callback));
          return this;
      }
      Multi SDIFFSTORE([List args,RedisCallback callback])=>sdiffstore(args,callback);

      Multi smembers([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("smembers",args,callback));
          return this;
      }
      Multi SMEMBERS([List args,RedisCallback callback])=>smembers(args,callback);

      Multi zadd([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zadd",args,callback));
          return this;
      }
      Multi ZADD([List args,RedisCallback callback])=>zadd(args,callback);

      Multi zincrby([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zincrby",args,callback));
          return this;
      }
      Multi ZINCRBY([List args,RedisCallback callback])=>zincrby(args,callback);

      Multi zrem([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zrem",args,callback));
          return this;
      }
      Multi ZREM([List args,RedisCallback callback])=>zrem(args,callback);

      Multi zremrangebyscore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zremrangebyscore",args,callback));
          return this;
      }
      Multi ZREMRANGEBYSCORE([List args,RedisCallback callback])=>zremrangebyscore(args,callback);

      Multi zremrangebyrank([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zremrangebyrank",args,callback));
          return this;
      }
      Multi ZREMRANGEBYRANK([List args,RedisCallback callback])=>zremrangebyrank(args,callback);

      Multi zunionstore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zunionstore",args,callback));
          return this;
      }
      Multi ZUNIONSTORE([List args,RedisCallback callback])=>zunionstore(args,callback);

      Multi zinterstore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zinterstore",args,callback));
          return this;
      }
      Multi ZINTERSTORE([List args,RedisCallback callback])=>zinterstore(args,callback);

      Multi zrange([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zrange",args,callback));
          return this;
      }
      Multi ZRANGE([List args,RedisCallback callback])=>zrange(args,callback);

      Multi zrangebyscore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zrangebyscore",args,callback));
          return this;
      }
      Multi ZRANGEBYSCORE([List args,RedisCallback callback])=>zrangebyscore(args,callback);

      Multi zrevrangebyscore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zrevrangebyscore",args,callback));
          return this;
      }
      Multi ZREVRANGEBYSCORE([List args,RedisCallback callback])=>zrevrangebyscore(args,callback);

      Multi zcount([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zcount",args,callback));
          return this;
      }
      Multi ZCOUNT([List args,RedisCallback callback])=>zcount(args,callback);

      Multi zrevrange([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zrevrange",args,callback));
          return this;
      }
      Multi ZREVRANGE([List args,RedisCallback callback])=>zrevrange(args,callback);

      Multi zcard([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zcard",args,callback));
          return this;
      }
      Multi ZCARD([List args,RedisCallback callback])=>zcard(args,callback);

      Multi zscore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zscore",args,callback));
          return this;
      }
      Multi ZSCORE([List args,RedisCallback callback])=>zscore(args,callback);

      Multi zrank([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zrank",args,callback));
          return this;
      }
      Multi ZRANK([List args,RedisCallback callback])=>zrank(args,callback);

      Multi zrevrank([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zrevrank",args,callback));
          return this;
      }
      Multi ZREVRANK([List args,RedisCallback callback])=>zrevrank(args,callback);

      Multi hset([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hset",args,callback));
          return this;
      }
      Multi HSET([List args,RedisCallback callback])=>hset(args,callback);

      Multi hsetnx([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hsetnx",args,callback));
          return this;
      }
      Multi HSETNX([List args,RedisCallback callback])=>hsetnx(args,callback);

      Multi hget([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hget",args,callback));
          return this;
      }
      Multi HGET([List args,RedisCallback callback])=>hget(args,callback);

      Multi hmset([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hmset",args,callback));
          return this;
      }
      Multi HMSET([List args,RedisCallback callback])=>hmset(args,callback);

      Multi hmget([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hmget",args,callback));
          return this;
      }
      Multi HMGET([List args,RedisCallback callback])=>hmget(args,callback);

      Multi hincrby([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hincrby",args,callback));
          return this;
      }
      Multi HINCRBY([List args,RedisCallback callback])=>hincrby(args,callback);

      Multi hdel([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hdel",args,callback));
          return this;
      }
      Multi HDEL([List args,RedisCallback callback])=>hdel(args,callback);

      Multi hlen([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hlen",args,callback));
          return this;
      }
      Multi HLEN([List args,RedisCallback callback])=>hlen(args,callback);

      Multi hkeys([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hkeys",args,callback));
          return this;
      }
      Multi HKEYS([List args,RedisCallback callback])=>hkeys(args,callback);

      Multi hvals([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hvals",args,callback));
          return this;
      }
      Multi HVALS([List args,RedisCallback callback])=>hvals(args,callback);

      Multi hgetall([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hgetall",args,callback));
          return this;
      }
      Multi HGETALL([List args,RedisCallback callback])=>hgetall(args,callback);

      Multi hexists([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hexists",args,callback));
          return this;
      }
      Multi HEXISTS([List args,RedisCallback callback])=>hexists(args,callback);

      Multi incrby([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("incrby",args,callback));
          return this;
      }
      Multi INCRBY([List args,RedisCallback callback])=>incrby(args,callback);

      Multi decrby([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("decrby",args,callback));
          return this;
      }
      Multi DECRBY([List args,RedisCallback callback])=>decrby(args,callback);

      Multi getset([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("getset",args,callback));
          return this;
      }
      Multi GETSET([List args,RedisCallback callback])=>getset(args,callback);

      Multi mset([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("mset",args,callback));
          return this;
      }
      Multi MSET([List args,RedisCallback callback])=>mset(args,callback);

      Multi msetnx([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("msetnx",args,callback));
          return this;
      }
      Multi MSETNX([List args,RedisCallback callback])=>msetnx(args,callback);

      Multi randomkey([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("randomkey",args,callback));
          return this;
      }
      Multi RANDOMKEY([List args,RedisCallback callback])=>randomkey(args,callback);

      Multi select([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("select",args,callback));
          return this;
      }
      Multi SELECT([List args,RedisCallback callback])=>select(args,callback);

      Multi move([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("move",args,callback));
          return this;
      }
      Multi MOVE([List args,RedisCallback callback])=>move(args,callback);

      Multi rename([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("rename",args,callback));
          return this;
      }
      Multi RENAME([List args,RedisCallback callback])=>rename(args,callback);

      Multi renamenx([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("renamenx",args,callback));
          return this;
      }
      Multi RENAMENX([List args,RedisCallback callback])=>renamenx(args,callback);

      Multi expire([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("expire",args,callback));
          return this;
      }
      Multi EXPIRE([List args,RedisCallback callback])=>expire(args,callback);

      Multi expireat([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("expireat",args,callback));
          return this;
      }
      Multi EXPIREAT([List args,RedisCallback callback])=>expireat(args,callback);

      Multi keys([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("keys",args,callback));
          return this;
      }
      Multi KEYS([List args,RedisCallback callback])=>keys(args,callback);

      Multi dbsize([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("dbsize",args,callback));
          return this;
      }
      Multi DBSIZE([List args,RedisCallback callback])=>dbsize(args,callback);

      Multi auth([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("auth",args,callback));
          return this;
      }
      Multi AUTH([List args,RedisCallback callback])=>auth(args,callback);

      Multi ping([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("ping",args,callback));
          return this;
      }
      Multi PING([List args,RedisCallback callback])=>ping(args,callback);

      Multi echo([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("echo",args,callback));
          return this;
      }
      Multi ECHO([List args,RedisCallback callback])=>echo(args,callback);

      Multi save([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("save",args,callback));
          return this;
      }
      Multi SAVE([List args,RedisCallback callback])=>save(args,callback);

      Multi bgsave([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("bgsave",args,callback));
          return this;
      }
      Multi BGSAVE([List args,RedisCallback callback])=>bgsave(args,callback);

      Multi bgrewriteaof([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("bgrewriteaof",args,callback));
          return this;
      }
      Multi BGREWRITEAOF([List args,RedisCallback callback])=>bgrewriteaof(args,callback);

      Multi shutdown([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("shutdown",args,callback));
          return this;
      }
      Multi SHUTDOWN([List args,RedisCallback callback])=>shutdown(args,callback);

      Multi lastsave([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("lastsave",args,callback));
          return this;
      }
      Multi LASTSAVE([List args,RedisCallback callback])=>lastsave(args,callback);

      Multi type([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("type",args,callback));
          return this;
      }
      Multi TYPE([List args,RedisCallback callback])=>type(args,callback);

      Multi multi([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("multi",args,callback));
          return this;
      }
      Multi MULTI([List args,RedisCallback callback])=>multi(args,callback);

      Multi exec([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("exec",args,callback));
          return this;
      }
      Multi EXEC([List args,RedisCallback callback])=>exec(args,callback);

      Multi discard([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("discard",args,callback));
          return this;
      }
      Multi DISCARD([List args,RedisCallback callback])=>discard(args,callback);

      Multi sync([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sync",args,callback));
          return this;
      }
      Multi SYNC([List args,RedisCallback callback])=>sync(args,callback);

      Multi flushdb([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("flushdb",args,callback));
          return this;
      }
      Multi FLUSHDB([List args,RedisCallback callback])=>flushdb(args,callback);

      Multi flushall([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("flushall",args,callback));
          return this;
      }
      Multi FLUSHALL([List args,RedisCallback callback])=>flushall(args,callback);

      Multi sort([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sort",args,callback));
          return this;
      }
      Multi SORT([List args,RedisCallback callback])=>sort(args,callback);

      Multi info([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("info",args,callback));
          return this;
      }
      Multi INFO([List args,RedisCallback callback])=>info(args,callback);

      Multi monitor([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("monitor",args,callback));
          return this;
      }
      Multi MONITOR([List args,RedisCallback callback])=>monitor(args,callback);

      Multi ttl([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("ttl",args,callback));
          return this;
      }
      Multi TTL([List args,RedisCallback callback])=>ttl(args,callback);

      Multi persist([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("persist",args,callback));
          return this;
      }
      Multi PERSIST([List args,RedisCallback callback])=>persist(args,callback);

      Multi slaveof([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("slaveof",args,callback));
          return this;
      }
      Multi SLAVEOF([List args,RedisCallback callback])=>slaveof(args,callback);

      Multi debug([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("debug",args,callback));
          return this;
      }
      Multi DEBUG([List args,RedisCallback callback])=>debug(args,callback);

      Multi config([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("config",args,callback));
          return this;
      }
      Multi CONFIG([List args,RedisCallback callback])=>config(args,callback);

      Multi subscribe([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("subscribe",args,callback));
          return this;
      }
      Multi SUBSCRIBE([List args,RedisCallback callback])=>subscribe(args,callback);

      Multi unsubscribe([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("unsubscribe",args,callback));
          return this;
      }
      Multi UNSUBSCRIBE([List args,RedisCallback callback])=>unsubscribe(args,callback);

      Multi psubscribe([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("psubscribe",args,callback));
          return this;
      }
      Multi PSUBSCRIBE([List args,RedisCallback callback])=>psubscribe(args,callback);

      Multi punsubscribe([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("punsubscribe",args,callback));
          return this;
      }
      Multi PUNSUBSCRIBE([List args,RedisCallback callback])=>punsubscribe(args,callback);

      Multi publish([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("publish",args,callback));
          return this;
      }
      Multi PUBLISH([List args,RedisCallback callback])=>publish(args,callback);

      Multi watch([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("watch",args,callback));
          return this;
      }
      Multi WATCH([List args,RedisCallback callback])=>watch(args,callback);

      Multi unwatch([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("unwatch",args,callback));
          return this;
      }
      Multi UNWATCH([List args,RedisCallback callback])=>unwatch(args,callback);

      Multi cluster([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("cluster",args,callback));
          return this;
      }
      Multi CLUSTER([List args,RedisCallback callback])=>cluster(args,callback);

      Multi restore([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("restore",args,callback));
          return this;
      }
      Multi RESTORE([List args,RedisCallback callback])=>restore(args,callback);

      Multi migrate([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("migrate",args,callback));
          return this;
      }
      Multi MIGRATE([List args,RedisCallback callback])=>migrate(args,callback);

      Multi dump([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("dump",args,callback));
          return this;
      }
      Multi DUMP([List args,RedisCallback callback])=>dump(args,callback);

      Multi object([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("object",args,callback));
          return this;
      }
      Multi OBJECT([List args,RedisCallback callback])=>object(args,callback);

      Multi client([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("client",args,callback));
          return this;
      }
      Multi CLIENT([List args,RedisCallback callback])=>client(args,callback);

      Multi eval([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("eval",args,callback));
          return this;
      }
      Multi EVAL([List args,RedisCallback callback])=>eval(args,callback);

      Multi evalsha([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("evalsha",args,callback));
          return this;
      }
      Multi EVALSHA([List args,RedisCallback callback])=>evalsha(args,callback);

      Multi bitcount([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("bitcount",args,callback));
          return this;
      }
      Multi BITCOUNT([List args,RedisCallback callback])=>bitcount(args,callback);

      Multi bitop([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("bitop",args,callback));
          return this;
      }
      Multi BITOP([List args,RedisCallback callback])=>bitop(args,callback);

      Multi hincrbyfloat([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hincrbyfloat",args,callback));
          return this;
      }
      Multi HINCRBYFLOAT([List args,RedisCallback callback])=>hincrbyfloat(args,callback);

      Multi incrbyfloat([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("incrbyfloat",args,callback));
          return this;
      }
      Multi INCRBYFLOAT([List args,RedisCallback callback])=>incrbyfloat(args,callback);

      Multi pexpire([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("pexpire",args,callback));
          return this;
      }
      Multi PEXPIRE([List args,RedisCallback callback])=>pexpire(args,callback);

      Multi pexpireat([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("pexpireat",args,callback));
          return this;
      }
      Multi PEXPIREAT([List args,RedisCallback callback])=>pexpireat(args,callback);

      Multi psetex([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("psetex",args,callback));
          return this;
      }
      Multi PSETEX([List args,RedisCallback callback])=>psetex(args,callback);

      Multi pubsub([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("pubsub",args,callback));
          return this;
      }
      Multi PUBSUB([List args,RedisCallback callback])=>pubsub(args,callback);

      Multi pttl([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("pttl",args,callback));
          return this;
      }
      Multi PTTL([List args,RedisCallback callback])=>pttl(args,callback);

      Multi quit([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("quit",args,callback));
          return this;
      }
      Multi QUIT([List args,RedisCallback callback])=>quit(args,callback);

      Multi script([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("script",args,callback));
          return this;
      }
      Multi SCRIPT([List args,RedisCallback callback])=>script(args,callback);

      Multi slowlog([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("slowlog",args,callback));
          return this;
      }
      Multi SLOWLOG([List args,RedisCallback callback])=>slowlog(args,callback);

      Multi time([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("time",args,callback));
          return this;
      }
      Multi TIME([List args,RedisCallback callback])=>time(args,callback);

      Multi scan([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("scan",args,callback));
          return this;
      }
      Multi SCAN([List args,RedisCallback callback])=>scan(args,callback);

      Multi sscan([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("sscan",args,callback));
          return this;
      }
      Multi SSCAN([List args,RedisCallback callback])=>sscan(args,callback);

      Multi hscan([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("hscan",args,callback));
          return this;
      }
      Multi HSCAN([List args,RedisCallback callback])=>hscan(args,callback);

      Multi zscan([List args,RedisCallback callback]) {
          _queue.add(new MultiCommand("zscan",args,callback));
          return this;
      }
      Multi ZSCAN([List args,RedisCallback callback])=>zscan(args,callback);

}
